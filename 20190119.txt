2019.01.19

cpp 맛보기 - 객체지향 2편

[default catch]
throw한 것들 중에 catch 할 타입이 없다면 RE로 처리.시스렘 별로 다르긴 함)

+) 타입 변환
#include <iostream>

using namespace std;

class base{};
class derived: public base{};

 int main(void)
{
 	int n;
 	cin >> n;
 	
 	base b;
 	derived d;
 	
 	try{
 		if(n==1)
 			throw &b;
 		if(n==2)
 			throw &d;
 		cout << "no exception" << endl;
 	}
 	catch(base*){
 		cout << "catch base*" << endl;
 	}
 	return 0;
 }

필기 좀 놓침. (EX64 ~ EX66)
===========================================================================================
p33 
[Rethrow]
# Error
LE(overflow, underflow, ...)
RE(RE_MAV(...), RE_DBZ)

오류에 따라 처리 방법을 원하는대로 체계화 시켜놓으면 throw도 원하는대로 가능함.
--> exception handling 하는 수준을 체계화

중첩 try-catch 
--> 더 강하게 throw 
--> exception handling하는 강도를 조절할 수 있음.
(비유)
감기에 걸려서 병원가서 그냥 감기면 감기약 처방해주고 집에 보냄.
위험한 독감이라면 격리조치 혹은 대학병원에 가라는 특별조치를 해야함. 

주의) 지금 상황을 그대로 throw하는 것임. int를 throw한 것이라면 int 그대로 또 전달해야함.
그래서 원래는 throw a;로 전달해야하는데 프로그래머들이 자꾸 실수를 해서 그냥 생략하고, 컴파일러가 넣기로 함.
Rethrow : 받은 거 그대로 다시 throw
--> exception 체계화(==구조화==관계화)에 도움.

p34
Task Unwind

함수호출의 경우 함수가 끝나면 반드시 돌아와서 마저 수행됨.
handling해야하는 경우라면 돌아와서는 안되고 skip을 해야함.

그럼 지역변수는?
함수호출의 경우는 함수가 종료되고 반환시에 지역변수가 사라지지만,
exception handling의 경우라면 돌아가지 않으므로 지역변수를 소멸시켜야함.
그 역할을 하는 것이 Task Unwind이고 자동으로 해제하도록 내재되어 있음.

(비유) 함수호출이라면 수업 끝나고 프로젝트 끄고 컴퓨터끄고 불끄고 나옴.
그런데 지진이 난 상황이라면 수업을 즉각 중단하고 그냥 바로 나와야 함. 
로봇이 알아서 불꺼주고 다해줌 --> 로봇: Task Unwind

#include <iostream>

using namespace std;

void f(int  a, int b)
{
	double c;
	throw 7;
}

void g(int x)
{
	double a[4];
	f(x+1, x+2);
}

int main(void)
{
	int x;
	
	try{
		g(3);
	}
	catch(int e){
		cout << "int type: " << e << endl;
	}
	return 0;
}

p35
개념은 있으나 컴파일이 안되기 때문에 강의하시지 않는다고 하심. --> skip

p37
일단 skip. 과제를 해보고 이야기 해야함

# cppreference 자주 찾아볼 것.
std::exception -> what 함수

# derived로 throw했을 때 base로 받을 수 있음. --> ???

구조체 복사할 때,
derived가 base로 structure copy가 일어난다면 base만큼만 up-casting이 일어남.
즉, Structure Copy의 up-casting
#include <iostream>

using namespace std;

class base{
	int i;
public:
	base(int ii): i(ii) {}
	void print(void) const{
		cout << i << endl;
	}
};
class derived: public base{
	double d;
public:
	derived(int ii, double dd): base(ii), d(dd) {}
	void print(void){
		base::print();
		cout << d << endl;
	}
};

int main(void)
{
	derived d(11, 1.1);
	base b(d);
	
	d.print();
	b.print();
	
	return 0;
}
------------------------------------------------------------------
반대의 경우 structure copy의 down-casting이라면?
#include <iostream>

using namespace std;

class base{
	int i;
public:
	base(int ii): i(ii) {}
	void print(void) const{
		cout << i << endl;
	}
};
class derived: public base{
	double d;
public:
	derived(int ii, double dd): base(ii), d(dd) {}
	void print(void){
		base::print();
		cout << d << endl;
	}
};

int main(void)
{
	base b(11);
	derived d(b);			// 당연히 SE.
	
	d.print();
	b.print();
	
	return 0;
} 
-----------------------------------------------------------
굳이 한다면 강제 타입 캐스팅을 해줘야 함
#include <iostream>

using namespace std;

class base{
	int i;
public:
	base(int ii): i(ii) {}
	void print(void) const{
		cout << i << endl;
	}
};
class derived: public base{
	double d;
public:
	derived(int ii, double dd): base(ii), d(dd) {}
	void print(void){
		base::print();
		cout << d << endl;
	}
};

int main(void)
{
	base b(11);
	derived d((derived&)b);		// structure copy (up-casting)

	d.print();
	b.print();
	
	return 0;
}

컴파일 해주긴 한데 쓰레기 값이 포함된 메모리공간을 복사하는 것임. --> 바람직하지 않음.

 derived로 타입 캐스팅 하는 것이 아니라 derived&로 레퍼런스를 이용해서 타입 캐스팅. 
int a = 3;
double d = (double)a;		// SE. 이게 안되는 이유와 같은 이유임.
double d = (double)3;
--> double d = 3.0;
========================================================================================
이렇게 하면 쓰레기값 없이 제대로 복사됨

#include <iostream>

using namespace std;

class base{
	int i;
public:
	base(int ii): i(ii) {}
	void print(void) const{
		cout << i << endl;
	}
};
class derived: public base{
	double d;
public:
	derived(int ii, double dd): base(ii), d(dd) {}
	void print(void){
		base::print();
		cout << d << endl;
	}
};

int main(void)
{
	derived dd(11, 1.1);
	base& b = dd;
	derived d((derived&)b);
	
	d.print();
	b.print();
	
	return 0;
}

===========================================================================================
앞에 일단은 다 skip
p49

p53
exception이 클래스로 묶여서 전달됨.

구조체이기 때문에 CBReference를 쓰는 것이 효과적이긴 하나, dangling 위험이 있으므로,
비효율적이더라도 CBV를 쓰는 것이 바람직. (up-casting structure copy)

p54
# ~(틸트) : bitwise연산자로 1의 보수를 구하는 연산자.
~(unsigned int)(0)/2 == 대략 20억 == 2GB
--> 메모리를 2GB 쓴다는 것임. 
#include <iostream>
#include <new>

using namespace std;

int main(void)
{
	char* ptr;
	try{
		ptr = new char[(~(unsigned int)(0))];
		delete[] ptr;
	}
	catch(bad_alloc ba){
		cout << ba.what() << endl;
	}
	return 0;
}

뒤의 bad_typeid 등등 전부 앞 내용이 필요한 것임.

p73
초창기에는 입출력결과에 대해서 handling을 하도록 하는 기능이 없었음.
if문으로 개별적으로 exception을 했었음.
나중에 나온 exception handling이랑 연관짓다보니 저런 이상한 코드가 나옴.
그래서 그냥 원래대로 코딩하는 것이 나음. 

Exception Handling 끝!
=======================================================================================
p64
[Array Object]

코드를 보면 operator가 멤버로 operating되어 있는데 배열연산자임.
따지고 보면 operator는 구조체때문에 만들어진 개념이라고 해도 무방함.

기존에 이미 원래 되는 걸로 operator를 만들어서 overloadling하면 안됨.
ex) operator+(char a, short b)       (X)이미  C언어에서부터 되는 것임.
그러므로 피연산자 두개가 둘 다 basic type이라면 이미 정의된 연산이기 때문에 operator 생성 불가.

==> 다음의 경우에 한함. 			// ST : structure type, BT : Basic Type
1) ST op BT 
2) BT op ST
3) ST op ST
4) PDST(predefined structure type: 수정불가능한 구조체) op ST

--> 1) 3)은 멤버로 등록이 됨. (friend도 됨)
PDST는 멤버, static등록이 안되고 friend로밖에 안됨. 즉, 외부변수, 함수

==> operator overloading의 기본체계에 대해 정리하고 넘어가면 됨.

객체지향을 위해서 friend보다는 멤버로 등록하는 것이 더 좋다는 것이지, friend도 가능함.

그러나 *멤버로만 등록 할 수밖에 없는 operator가 있음.
: 배열 연산자[], 함수 연산자()

< operator로 재정의하고자 하는 연산자의 특성은 유지됨 >
1) 기존 항의 개수 유지.		ex) 덧셈연산자(+)의 피연산자는 2개임. 2개로 유지해야함
2) 연산 우선순위 유지

그러므로 배열 객체는 본질은 구조체인데, 마치 배열인 것처럼 사용이 가능. 
즉, 배열같은 구조체 변수. (Array Object)

# 여기서, object == variable
단, dependency를 가지는 함수에 대해 object는 명시를 하고 있고, variable은 명시하지 않다는 차이가 있긴 함.
C++에서는 객체지향적인 관점에서 명시를 하는 것을 택함.

p65
[Function Object]
위와 똑같은 내용인데 함수라는 것. 위에서 할 얘긴 다 했음.
함수같은 구조체 변수.

배열 객체는 항의 개수가 하나로 제한 되어 있는데,
함수 객체는 항의 개수가 여러개로, 제한이 없는 특성이 유지됨.

# overloadig : 같은 이름에 대해서 서로 다른 타입을 가지는 것
--> 그래서, 'operator를 overloading한다'라고 표현한다.

# operator에 대해 깊이 이해하려면 묵시적타입변환에 대해 자세히 알아야 함.

< template >

인자 a와 b중에 더 큰 값을 리턴하는 함수가 있다고 생각해보자.
이 인자의 타입에는 int도 있고, double도 있고, 구조체도 있을거다. 
이 때, 타입의 구분없이 일괄적으로 처리하는 함수를 만드는 것.
--> Polymorphsim 구현 가능.

함수가 아닌 템플릿임. 	(비유) 붕어빵 틀. 어떤 재료를 넣느냐에 따라 붕어빵 맛이 달라짐.

하나의 타입당 하나의 함수가 생성이 됨. 
주의) 템플릿은 함수가 아님.
max_t<int>(ai, bi);
max_t<double>(ad, bd);
--> max_t에 대해 overloading되는 두개의 함수가 생성되는 것임.

< typename T > : template parameter

함수 선언을 할 때 <template parameter>는 생략해도 됨.
인자로 넣어주는 값의 타입으로 유추할 수 있기 때문에 묵시적 타입변환이 일어난다.

p68
컴파일 단계에서 함수 호출을 하는 순간 Instantiation을 수행해서 함수를 생성해냄.
'함수 호출 해!' 라는 말에 이 '함수를 만들어라'라는 말이 함축되어 있음. --> 묵시적(implicit)

Explicit Instantiation : 명시적으로 함수 생성
명시적으로 특정 타입에 대해 SE인지 아닌지 테스트 해보기 위해서 사용하는 방법.
( 주로 템플릿 개발자가 사용하는 것이고, 템플릿 사용자는 사용하지 않음 )

p.69
템플릿은 사용하나 안하나 실행파일의 크기는 똑같음.
그러나 소스코드는 간결해짐.
--> 유지보수에 유리 

========================================================================================================
다음시간 STL 강의 + 앞에 skip한 부분.






















2019.01.21

cpp 맛보기 - 객체지향 2편 (지난 시간에 skip 했던 부분들 + STL)

RTTI에는 함수 포인터 정보가 들어가 있음.
(중요)
#include <stdio.h>

typedef void (*FP)(const void*);

struct base_RTTI{	// Run-time Type Information
	FP f;
	FP g;
};

struct base{
	int a;
	struct base_RTTI* pRTTI;
};
void base_f(const struct base*);
void base_g(const struct base*);

struct base_RTTI base_rtti = { (FP)&base_f, (FP)&base_g };

struct base* base_base(struct base* this)
{
	this->a = 0;
	this->pRTTI = &base_rtti;
	return this;
}

void base_f(const struct base* this)
{
	printf("base::f()\n");
}

void base_g(const struct base* this)
{
	printf("base::g()\n");
}

struct derived{
	int a;
	struct base_RTTI* pRTTI;
	int c;
};

void derived_f(const struct derived*);
void derived_g(const struct derived*);
struct base_RTTI derived_rtti = {"derived class", (FP)&derived_f, (FP)&derived_g);

struct derived* derived_derived(struct derived* this)
{
	base_base((struct base*)this);
	this->c = 0;
	this->pRTTI = &derived_rtti;
	return this;
}

void derived_f(const struct derived* this)
{
	printf("derived::f()\n");
}

void derived_g(const struct derived* this)
{
	printf("derived::g()\n");
}

int main(void)
{
	struct base b;
	struct derived d;
	
	struct base* p = &b;
	struct base* q = (struct base*)&d;
	
	base_base(&b);
	derived_derived(&d);
	
	printf("type == %s\n", p->pRTTI->typename);
	printf("type == %s\n", p->pRTTI->typename);
	
	p = &b;
	q = (struct base*)&d;	// up-casting
	
	p->f(&*p);
	q->f(&*q);
	return 0;
}
미완된 코드임 폰에 사진 있으니까 참고.
============================================================================
p38
[typeid]
RTTI정보가 있고 없고에 따라 객체의 타입을 다르게 알려줌.

RTTI가 있다면 객체의 실체 타입(실제적인 타입)을 알 수 있음.
RTTI가 없어도 동작은 하나, 실제적인 타입이 아닌 레퍼런스 타입을 알려줌. 

클래스에 virtual function이 한개라도 있으면 자동으로 RTTI정보를 갖게 됨. 
virtual function이 하나라도 없다면 RTTI정보는 없음.

p39
[cast]
# C언어의 철학에서 프로그래머는 똑똑함. unsafe한 경우에 대해 명시적 타입캐스팅을 했다면 프로그래머의 의도로 판단하고 넘어감.
C++에서는 프로그래머를 조금 의심함. unsafe한 경우에 대해 detail하게 나누어 따져서 타입캐스팅해야함.

--> 타입캐스팅을 세가지로 구분.
1) 할 수도 있는 경우, static_cast : down-casting, basic type, R* --> void*
	(비유) 일반 부엌칼을 쓰기 위해서는 자격증 필요없음. 그냥 마트 가서 사서 쓰면 됨.
2) 위험한 경우, const_cast : const* --> non-const*
	(비유) 주사기.
3) 매우 위험한 경우, reinterpret_cast : R1* --> R2*  ,  R*(referece) --> BT(basic)
	(비유) 수술용 칼을 쓰기 위해서는 의사면허증을 보여줘야함.

==> 지금부터는 예전의 방식 대로는 타입 캐스팅이 불가능한 것처럼 코딩할 것. 
	즉, 세가지 캐스팅 방법을 쓰되, 아직 초보자이므로 reinterpret_cast는 쓰지말고 static_cast만 사용하도록 하자.

p45 
코드가 제대로 실행되도록 하기 위해서는 
#pragma pack(1) 을 추가해야함	---> 아직 배운 지식이 얕다. 더 배워야 이해할 수 있는 내용임.

#include <iostream>

#pragma pack(1)

using namespace std;

struct int_seq{
	short i1;
	int i2;
	short i3;
	int i4;
};

int main(void)
{
	int_seq a = {1,2,3,4};
	int* p = reinterpret_cast<int*>(&a);
	
	cout << *(p+2) << endl;
	cout << hex << *(p+2) << endl;
	cout << *(p+3) << endl;
	return 0;
}

=========================================================================================================================
C++에서 추가된 개념 : dynamic_cast
down-casting --> 부분 dangling pointer 발생.
static_cast도 가능함.
dynamic_cast : RTTI정보가 없으면 제대로 동작함. 제대로 동작했을때 위험한 상황이라면 NULL을 반환.
그래서 프로그래머는 NULL이 아닌경에만 실행되도록하는 안전한 프로그램을 만들 수 있음.
(RTTI가 없으면 static_cast와 별반 다를 게 없음)

---------------------------------------------------------------------------------------------------------------------------
p55
[bad_cast]
# 레퍼런스는 이미 *마법모자를 씌운 형태이기 때문에 0을 넣으면 바로 RE발생.
그래서 아예 0을 받지 못하게 만들어야함.

+) bad_typeid

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
cpp - 객체지향 3편

그전에, 알고 있어야 할 기본 지식들 복습. 
지금까지 배운거 완전히 숙지하고 있어야 함.

(중요) [Elemnt Access Method]
#include <iostream>

using namespace std;

class farray{
	int p[3];
public:
	int& at(int i){
		return p[i];
	}
};

int main(void)
{
	farray a;
	
	for(int i=0;i<3;++i)
		a.at(i) = (i+1)*11;
		
	for(int i=0;i<3;++i)
		cout << a.at(i) << endl;
	return 0;
}

------------------------------------------
< C언어로 전환 >
#include <stdio.h>

struct farray{
	int p[3];
};

int* farray_at(struct farray* this, int i){
		return	& this->p[i];
}

int main(void)
{
	struct farray a;
	int i;
	
	for(i=0;i<3;++i)
		*farray_at(&a,i) = (i+1)*11;
		
	for(i=0;i<3;++i)
		printf("%d\n", *farray_at(&a,i) );
	return 0;
}
=====================================================================
#include <iostream>

using namespace std;

class farray{
	int p[3];
public:
	int& at(int i){
		return p[i];
	}
	const int&  at(int i) const{
		return p[i];
	}
};

int main(void)
{
	farray a;
	
	for(int i=0;i<3;++i)
		a.at(i) = (i+1)*11;
	
	const farray b(a);	// structure copy
	
	for(int i=0;i<3;++i)
		cout << b.at(i) << endl;	// SE
	return 0;
}

-------------------------------------------------------
< C언어로 전환 >
#include <stdio.h>

struct farray{
	int p[3];
};

int* farray_at(struct farray* this, int i){
	return	& this->p[i];
}

const int* farray_at_const(const struct farray* this, int i)
{
	return & this->p[i];
}

int main(void)
{
	struct farray a;
	
	int i;
	
	for(i=0;i<3;++i)
		*farray_at(&a,i) = (i+1)*11;
		
	const struct farray b = a;
	
	for(i=0;i<3;++i)		
		printf("%d\n", *farray_at_const(&b,i) );	// SE : const * --> non-const*
	return 0;
}
===============================================================================================
#include <iostream>

using namespace std;

class farray{
	int p[3];
public:
	int& operator[](int i){
		return p[i];
	}
	int operator[](int i)const{
		return p[i] ;
	}
};

int main(void)
{
	farray a;
	
	for(int i=0;i<3;++i)
	 	a[i] = (i+1)*11;
	
	const farray b(a);	// structure copy
	
	for(int i=0;i<3;++i)
		cout << b[i] << endl;	// SE
	return 0;
}


-------------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class A{
public:
	typedef int* ptr_type;	// class member type
private:
	int i;					// class member variable
public:
	int& get(void){			// class member function
		return i;
	}
};

int main(void)
{
	A a;
	
	
	//a.i;					// error: can not access
	a.get() = 99;
	A::ptr_type p = &a.get();
	*p = 88;
	cout << a.get() << endl;
	
	return 0;
}

-------------------------------------------------------------------------------
&p[3] == &*(p+3) == p+3

 
#include <iostream>

using namespace std;

struct farray{
	int p[3];
};

int main(void)
{
	farray a;
	int i=0;
	for(int* p = &a.p[0]; p!=&a.p[3];++p)
		*p = (++i)*11;
	for(int* p = &a.p[0]; p!=&a.p[3];++p)
		cout << *p << endl;
	return 0;
}



















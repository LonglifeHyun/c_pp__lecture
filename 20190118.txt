20190118

cpp 맛보기 - 객체지향 2편 두번째

[Exception Handling]
ifstream ifs;
double v;

ifs.open("abc.txt");
if(!ifs.is_open()){		// exception : file이 없거나 권한의 문제 등으로 열리지 않을 때
	// handling
	cerr << "file cannot be opened. " << endl;
	return -1;
}
while(ifs >> v){
	cout << v << ' ';
}
cout << endl;

ifs.close();
==========================================================================

예외가 발생했을 때 handling을 적절하게 해주지 않으면 허약한 프로그램이 된다.
강한 프로그램이 되려면 handling을 적절하게 해주어야 한다.
handling이 많아질수록 프로그램은 복잡해짐
여러사람들이 handling을 하므로 handling만을 모아서 체계화를 하고 일괄성을 부여해야함. 

// main stream & exceoption handling : 복잡
statement1;
if(condition1){	// exception1
	handling1;
}
statement2;
statement3;
if(condition2){ // exception2
	handling2;
}
statement4;
if(condition3){	// exception3
	handling3;
}
statement5;
statement6;
if(condition4){ // exception2
	handling2;
}
statement7;

===================================
위의 코드를 다음과 같이 전환. handling만 따로 모음.
주된 작업이 무엇인지 쉽게 파악 가능. 

// main code stream
statement1;
if(condition1) thorw exception1
statement2;
statement3;
if(condition2) thorw exception2
statement4;
if(condition3) thorw exception3
statement5;
statement6;
if(condition4) thorw exception2
statement7;
(-----------------------------------------------)
// exception handling
catch(exception1){	// for exception1
	handling1;
}
catch(exception2){	// for exception2	// condition2와 4에 대해 공통으로 처리함.
	handling2;
}
catch(exception3){	// for exception3
	handling3;
}

--> main stream은 try부분에, handling은 catch부분에 따로 기술됨. (이런건 C언어로 구현될 수 없음)

p24
exception의 종류를 throw하는 타입으로 구분함.

p25
#include <iostream>

using namespace std;

void g(int v)
{
	if(v==1 || v==2) throw v;
}

void f(int v)
{
	g(v);
	if(v==3) throw 3.0;
}

int main(void)
{
	int v;
	
	try{
		cin >> v;
		f(v);
		if(v==4) throw '4';
		if(v==5) throw '5';
		cout << "No Exception: ";
		cout << v << endl;
	}
	catch(int e){
		cerr << "Exception: int(";
		cerr << e << ")" << endl;
	}
	catch(double){
		cerr << "Exception: double";
		cerr << endl;
	}
	catch(char c){
		cerr << "Exception: char(";
		cerr << c << ")" << endl;
	}
	cout << "Try-catch end." << endl;
	return 0;
}

함수 호출과 비슷해보이지만 차이가 있음.
얘네는 한번 exception으로 넘어가면 돌아오지 않음.
돌발 상황이 발생해서 다음 단계로 넘어가면 안되기 때문에 만들어진 개념인데,
함수 호출처럼 갔다가 다시 돌아오면 처리해서는 안될 뒤의 작업을 계속해야함. --> 부적합
이런 개념은 C언어에는 없음. (갔다가 돌아올 수 밖에 없음)
그래서 C++에서 새로 만들어낸 개념.

catch는 타입의 수만큼밖에 만들지 못함. --> 제한됨.
그래서 구조체나 클래스 타입을 사용해도됨.

그전에,
[Temporary Object]
int& r = 3;		// int* r = &3; --> SE
const int& r = 3;	// const int temp = 3;
			// const int* r = &temp; --> OK
-----------------------------------
int i = 3;
int i(3);

i = 3;
i = int(3);
i(3);		//SE 
-----------------------------------
Class A{
	int i;
public:
	A(void): i() {}
	A(int ii): i(ii) {}
	int get_val() const {return i;}
};

A a;		// calling constructor(1)
A b(3);		// calling constructor(2)
A c = A(3);	// calling constructor(2) 

a = b;		// structure copy
a = A(7); 	// after making temporary object, structure copy
a(3);		// SE 
--------------------------------------------------------------------
< value의 개념 >
i = 3;
i에 3이 저장되기 전에, 3은 어디에 저장되어 있는가?

MOVE [1000 0000] 3		// assembly language 예
0011 1000 0000 0000 0011
(명령) (주소)	(값==3)
--> 3은 기계어 instruction에 포함되어 있는 상태. (일부분으로 세들어 사는 셈. 주소를 가진다고 말할 수 없음)
명령이 수행되는 순간에 이 3은 레지스터로 이동. (레지스터에는 고유 id가 있을 뿐, 주소가 없음)
그러므로 값은 주소가 없음. 
변수안에 들어가게 되면 변수의 주소를 가지게 됨.

(정리)
1) 값 3은 계산 전에는 명령에 포함되어 있다.
2) 값 3은 계산 중에는 Register에 저장되어 있다.
--> 그러므로 값 3은 주소를 가질 수 없다. 이런 데이터를 값이라고 한다.
================================================================================================================
구조체 타입에 대해서는,
A s = {3, 3.3};	// ok. 초기화할때는 가능.
s = {3, 3.3};	// SE  

값은 instruction에 잠시 머물러야 하고, 레지스터에 들어가야하므로 제한된 크기의 정보가 필요한데 구조체는 안됨.
그게 기존의 C언어인데
C++은 꿈이 좀 큼. 안되는걸 되게 하고 싶어함. 
객체지향의 polymorphism을 구현하고자 하기 때문. 값의 타입을 구별하지 않고 일괄적으로 처리하고싶기 때문.
즉, 구조체(클래스)타입의 변수를 기본 타입 변수와 같은 방식으로 취급하고 싶어한다.
(그래서 구조체 덧셈도 가능하게 하는 operator의 개념도 나옴) 

기본 타입에는 값이 존재하는데, 구조체 타입에는 값의 개념이 없음.
일괄적으로 처리하는데 어려움이 있으므로 구조체에서 value역할을 담당할 것이 필요함.
그래서 temporary object를 만듦. (값의 역할을 하지만 실제는 변수)

--> 그래서 C++에서는 
A s = A{3, 3.3};	// OK
A q(3, 3.3);		// OK
s = A{3, 3.3};		// A{3, 3.3} :구조체의 값이 되어야 함.  

temporary object의 목적은 구조체(클래스)의 value역할을 하도록 하는 것.
temporary object == 구조체(클래스)의 값의 역할을 하지만, 실제는 변수(memory)이다.

실제 값이 되는가?
instruction에 저장되거나, 레지스터에 저장될 수 있지 않기 때문에
메인메모리에 저장을 하고 그 메인메모리의 부분을 레지스터로 간주하는 수밖에 없음.

그래서 실제로는 주소값이 존재하긴하는데 주소값 달라고 하면 버럭 화를 냄. 왜냐면 지는 값이니까!
(비유) 수현이한테 몸무게를 물으면 버럭 화를 냄. "몸무게 같은거 없어여!" 

(결론) temporary object 는 값처럼 취급하고 싶은 변수.
===============================================================================================================
< temporary object를 만드는 방법 >
1) 생성자를 통해 만듦. (생성자도 사실은 반환타입이 클래스 그자체(단, 반환타입을 적지는 않음)인 RBR하는 함수임)
2) 함수의 return을 통해 만듦.(구조체 RBV)

class myclass{
public:
	[myclass&] myclass(void){
		return [*this];		// []는 C언어에서는 있는데, C++로 넘어오면서 생략되어야 하는 부분임.
	}
};

myclass a;	// 변수 선언에서 기본 생성자 호출은 ()를 사용해서는 안됨. 함수 선언과 구별하기 위함.
		// 사실 개발자들은 일괄성을 위해 ()를 사용하고 싶은데, C언어와의 호환성 때문에 그렇게 하지 못함.
		// 함수의 인자가 없다면 void를 꼭 쓰도록 강제한다면 해결될 수 있는 문제. 쉽게 구별됨. 
		// 그러나 문법이 그렇진 않음. 
	
// TO 생성을 위한 기본생성자 호출에서는 ()를 사용해야 함.
myclass temp;
a = temp.myclass(); == temp; 	// temp 그 자체가 되어, 라는 공간이 창조됨.
=================================================================================================================
따라서, 이게 가능해짐.
A s = A{3, 3.3};	// OK
A q(3, 3.3);		// OK
s = A{3, 3.3};		// A temp(3, 3.3);	-->  Making TO
			// s = temp;		--> Structure copy
C++의 초창기에는 일일히 Making TO를 해서 structure copy를 했었는데 
안정화 되면서 그냥 똑같은 것으로 보자고 한 것임!
단, 컴파일 과정에서 컴파일러가 만든 TO의 수명은 컴파일러 마음임. 일반적으로 한문장 수행하고 사라진다고 생각.
==================================================================================================================
다시 돌아와서, p26

Throw할 때는 값을 넣어야 함. 즉, 값을 Throw.
Catch는 타입으로 구분함. 	//실제는 아니지만 느낌은 function overloading같음.
그러므로 throw 하는 값의 타입이 중요함.

--> Throw에 구조체 변수를 넣어도 됨. 변수는 값(TO)가 될 수 있기 때문에.

구조체와 클래스가 NULL임. 
--> 데이터를 담는 것이 목적이 아리나, 타입의 종류를 다양화하기 위함임. 
 ( catch를 구분하기 위해 기본타입으로는 한계가 있기 때문에. )

catch에서 타입 구분만 하면 되면 인자로 변수를 생략해도 됨.

#include <iostream>

using namespace std;

struct e1{};
class e2{};

int main(void)
{
	int v;
	
	try{
		cin >> v;
		if(v==1) throw e1();
		if(v==2) throw e2();
		cout << "In try." << endl;
	}
	catch(e1){					// 변수명이 생략되었음. e1은 타입임.
		cout << "In catch: e1" << endl;
	}
	catch(e2){					// 변수명이 생략되었음. e2는 타입임.
		cout << "In catch: e2" << endl;
	}
	cout << "Try-catch end." << endl;
	return 0;
}

p27
주소도 값임. 주소도 타입이 존재.
v1 : 전역변수
v2 : try밖의 지역변수
v3 : static 지역변수
v4 : try안의 지역변수

const int* 로 해놓은 이유: 바꾸지 않겠다는 의지를 반영한 것임.

try를 벗어나게 되면 v4는 사라짐. p가 v4를 가리키고 있었다면 dangling pointer가 됨.
그러므로 v4를 throw하면 안됨.

p28
배열은 throw할 수없으므로 첫.요.주로 묵시적 타입변환이 일어남.
a[4]는 dangling pointer의 원인. 그래서 throw 불가.

요소포인터는 배열길이연산 방식으로는 배열길이를 구할 수 없음. 

배열길이 전달방법들 중,

1) 전역변수는 사장님이 싫어하시므로 사용불가.
3) 함수 인자로 전달 --> catch는 인자로 하나밖에 받을수 없으므로 사용불가.

2) 상수값, 4) 종료신호 이것만 가능.
 +) 상수값 전달과 비슷한 5) 배열포인터 또 그와 비슷한 CBR, 구조체에 배열을 담아서 전달하는 것도 가능 
    7) 구조체

# 동일한 타입에 대해 2개 이상의 catch를 만드는 것은 가능은 하나 바람직하지 않음.
 ( 위에 있는 catch에 우선적으로 따름 )
 동일한 타입에 대해 2개 이상 만드는 것을 허용해주는 이유: 분산되어 있을 때 checking에 유리하게 하기 위함.

p29-30
배열포인터 
가능은 하지만, 
서로 다른 타입에 대해서 여러번 중복 코딩을 하게 됨. 바람직하지 않음.
--> 2) 상수값 전달도 마찬가지 (배열의 길이가 달라지는 상황에서는)

p31 
6) 구조체
구조체의 TO를 전달하는 방식임. (구조체에 대한 CBV 방식)
#include <iostream>

using namespace std;

struct S {
	int i;
	double d;
	S(int ii, double dd): i(ii), d(dd) {} 
};

void f1(S s)			// CBV : no efficient
{
	cout << s.i << ' ' << s.d << endl;
}

void f2(const S* p)		// CBA : efficient
{
	cout << p->i << ' ' << p->d << endl;
}

void f3(const S& r) 		// CBR : efficient
{
	cout << r.i << ' ' << r.d << endl;
}

int main(void)
{
	S s(1, 1.1);
	f1(s);
	f2(&s);
	f3(s);
	
	f1( S(1, 1.1) );	// S temp(1, 1.1);
				// f1( temp );		// TO는 함수가 끝날 때까지 사라지지 않음. 
	f2( &S(1, 1.1) );	// SE. TO에 대해서 주소를 물으면 화낸다! 
	f3( S(1, 1.1) );	// 실제로는 주소가 존재.은근슬쩍 간접적으로 주소를 보는 것.

/*
+) void f3( S& r )이었다면				
 예전 : 레퍼런스니까 원래는 값이 들어가면 안되는데, TO의 본질은 값이 아니므로 OK 	
 현재 : 명목상 쟤는 값이니까  SE. 
*/

	return 0;
}
====================================================================================================================
CBV가 좀 비효율적이더라도 안전하므로 이걸 쓰도록 할 것.

CBR를 하게 되면 dangling. --> 위험
--> catch(&ptr_sz ps) 
 const가 아닐때, 레퍼런스를 쓰면 원래 안되는건데 타입 체킹을 똑바로 하지 못해서 그냥 되는 것처럼 보임.















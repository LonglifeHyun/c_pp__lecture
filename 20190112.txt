2019.01.12
cpp 맛보기 - 기본기능 2편

[Inline Function]
# 매크로 함수의 장점에 대해 이해 못함. 다시 볼 것.

실제로는 함수 호출이 아님
함수 호출시에는 ()안에 값이 전달되는데, 얘는 변수를 그대로 전달.
수식도 그대로 씀.
단, 주의) 하나의 변수에 대해 두번 이상의 수식을 써서 컴파일러를 헷갈리게 할 수 있는 코딩은 하지 말 것.

매크로 함수를 썼던 이유?
함수 연산자 : 연산자들 중에서 제일 시간이 걸리는 연산자.
--> 함수 연산자를 자주 사용해서 함수 호출을 자주 하는 프로그램은 과거에 바람직하지 못한 것으로 여겨졌었음.
 그래서 함수 하나에 엄청나게 많은 내용이 포함 돼 있었음

그러나 지금은 속도보다는 유지보수가 더 중요한 시대임. 매크로 함수는 굳이 필요가 없음.

기존의 매크로 함수의 장점을 가지면서 단점을 보완
-->  Inline function

recursive call는 코드 삽입으로  할 수 없음.
tial recursion이라면 부담이 덜하겠지만 암튼 부담임.

tail recursion : recursion이 함수의 제일 마지막에 한 번 일어나는  recursion 형태
	--> 일반적인 recursion보다 아주 쉽게 반복문으로 전환이 가능.

# 모든 recursive call은 반복문으로 전환이 가능, 모든 반복문은 recursive call로 전환이 가능.
# 그래서 반복문의 문법이 없는 프로그래밍 언어도 있음.

Inline은 명령 하는 것이 아니고, 코드삽입이 가능하다고 판단되는 경우에 넣어달라고 컴파일러한테 요청하는 것임.
p56에 있는 거 정도는 가능.

코드 삽입의 장점?

p57
명령 수행 순서 : 5 (9 6 4) 3 7 (9 6 4) 1 
--> 9 6 4 가 반복됨

오른쪽(코드 삽입)의 경우에는 10개의 명령만 수행하면 되는데
왼쪽(함수 호출)의 경우에는 호출과 반복의 추가 코드로 인해 16개의 명령을 수행해야함.
		Function Call		Code Insertion
명령실행횟수	4 + (3+3)*2		4 + 3*2		
실행파일크기	4 + 2*2 + 4		4 + 3*2		
--> 이 경우에는 Code Insertion이 좋음

코드(9 6 4)를 100번을 반복하면 ?
		Function Call		Code Insertion
명령실행횟수	4 + (3+3)*100		4 + 3*100		
실행파일크기	4 + 2*100 + 4		4 + 3*100		

--> 이 경우에는 실행파일 크기에서보면 Function Call이 더 좋음.

명령실행횟수가 커질수록, 실행 속도가 느려짐
실행파일크기가 커질수록, 실행파일의 *로딩속도가 떨어짐(큰 문제) / 메모리의 부담감이 증가(작은 문제) 
ex) vitual studio, 포토샵 등은 로딩 속도가 느림.

명령실행횟수는 Code Insertion이 항상 앞서지만,
실행파일크기는 Code Insertion이 항상 앞선다고 단정지을 수가 없음.

==> 따라서 함수의 크기가 커질수록, 그 큰 함수를 여러번 반복하는 것은 Code Insertion을 쓰기에 부적절.
	반면, 작은 함수를 조금만 반복하는 경우에는 Code Insertion이 무조건 좋음.
	그러므로 무작정 Inline Function을 쓰는 것은 바람직하지 못하다.

==========================================================================================================

cpp 맛보기 - 객체지향 1편

[객체지향이 나오게 된 배경]
# 반복을 잘 어찌하는 것이 프로그램을 잘 짜는 관건.
연속-중첩의 반복 패턴만 혼합한 프로그램 --> 구조적 프로그래밍(단순하고 이해하기 쉬움)
연속-중첩-교차의 반복 패턴을 혼합한 프로그램 --> 스파게티 프로그래밍(복잡하고 이해하기 어려움)
교차 패턴 없이도 코딩할 수 있다는 걸 누가 증명해냄. 
그러나 교차패턴없이 코딩하는 것은 초보자들에겐 불편함. 그래서 스파게티 프로그램을 만들어버림.
나중되면 본인 조차 모름.
-->  주석도 잘 써가면서 구조적 프로그래밍을 하는 것이 중요함.

구조 : 요소들을 나열하고 그 요소들간의 유기적인 *관계
--> 구조적 프로그램 : 연속, 중첩의 관계는 사용하되, 교차의 관계는 사용하지 않는 프로그램(관계를 중요시)

교차패턴을 만드는 도구 == goto문
따라서 goto문을 사용하지 않으면 구조적 프로그래밍을 할 수 있다. --> 많은 프로그래밍 언어에서 아예 만들지를 않음.
(C언어는 있긴한데 거의 쓰지 않음)
==> 구조적 프로그램 : goto문을 쓰지 않는 프로그램

프로그램의 구조 : 명령들의 구조. 즉, 명령들의 *포함관계.

암튼 이러한 이유로, 순차적 프로그램 --> 구조적 프로그램

구조를 중요시 여기는 이유 : 유지보수에 유리 --> 대형 소프트웨어 개발에 유리

그럼에도 불구하고 구조적프로그래밍으로도 Sofrware Crisis가 발생함.
명령들간의 dependency를 잘 몰랐기 때문.
(비유) 교수님이 다른 학생들은 다 좋아하는데 수현이만 미워해서 수현이를 없앰. 
	그랬더니 수현이를 좋아하던 다른 학생이 움.
	--> 교수님 당황;;
	앞으로는 누굴 좋아하는지 팻말에 적어서 들고있기로 함.(객체지향)
==>  객체지향 프로그래밍

반드시 구조적 프로그래밍이 객체지향 프로그래밍 이전에 선행되어야 함.

# 하드웨어의 특징 : 시간이 지나면 변형 혹은 훼손되므로 똑같은 것이라도 또 살 수 있음.
   소프트웨어의 특징 : 시간이 지나도 그대로임. 똑같은 것을 사진 않음. 좀 더 새로운 걸 삼.
--> 구조적 프로그래밍의 한계를 극복해야 소프트웨어를 업그레이드 시킬 수 있음

복잡한 것을 다루는 방법 : 필요한 것만 신경쓰면 됨.
(비유)
교수님은 머리카락이나, 세포 등으로 보면 복잡한 존재임.
그러나 우리는 복잡함을 느끼지 않고 그럴 필요도 없음. 
필요한 부분에만 신경을 씀. 그냥 교수님의 얼굴만 보면 됨.

객체지향 프로그래밍 : 복잡한 프로그램을 간단하게 *느껴지도록 하는 프로그래밍 방법. 간단하게 만드는 것이 아님.
--> 1) 캡슐화 2) 상속 3) 다형성

# 구조적 프로그램은 함수 밖의 관계에 대해서는 신경을 쓰지 않음.

[ 캡슐화 (Encapsulation) ]
	(1) 의존성을 고려하여 함수와 변수를 하나의 개념(class)으로 만든다.
	(2) 감출건 감춰서 간단하게 보이도록 한다. 최대한 많이 감춘다.
Dependency
	1) data dependency	2) function dependency 
 	--> 객체지향 프로그램은 묶어서 의존 관계를 명시시킴 & 필요한 것만 공개 : Encapsulation 
	공개하지 않은 것에 대해서는 dependency가 생기지 않게 하고 공개한 것에 대해서는 dependency가 생길수도 있게 함.

[Member]
처음부터 소스코드를 만들 때 관련있는 것은 구조체에 넣어서 묶어버림.

p3
구조체 이름을 함수앞에 명시함으로써 구조체에 소속된 함수임을, 즉, dependency를 알림.
구조체 포인터(struct date* this)가 생략됨. 즉. 있는거임!

p4
두개의 코드는 같은 것임
#include <iostream>

using namespace std;

struct date{
	int d,m,y;
	void add_day(int n);
};

void date::add_day(int n)
{
	this->d += n;
}

int main(void)
{
	date dt = {25,1,1991};
	
	dt.add_day(3);
	return 0;
}

------------------------------------------------
위의 코드를 보고 밑의 코드로 생각할 줄 알아야 함
#include <stdio.h>

struct date{
	int d,m,y;
};

void add_day(struct date* this, int n)
{
	this->d += n;
}

int main(void)
{
	struct date dt = {25,1,1991};
	
	add_day(&dt,3);
	return 0;
}

==> 여기서 d, m, y는 date에 포함관계. 그러나, add_day함수는 date에 포함관계가 아닌 의존관계.
	주의) add_day함수는 date 구조체를 이루고 있는 구성요소가 아님. 착각하지 말도록.
p5
세가지 방법 중,
멤버 변수 이름 앞에 "this ->" 이게 Original이긴 함.

함수의 내부정의와 외부정의의 차이는 없음.
다만 내부정의는 자동 Inline 함수 처리가 됨

p11
[const]

#include <iostream>

using namespace std;

struct date{
	int d,m,y;
	void add_day(int n);
	int day(void) const;
};

void date::add_day(int n)
{
	this->d += n;
}

int date::day(void) const		//  const는 생략된 struct date* this 에 대한 것임. 생략됨.
{
	return this->d;
}

int main(void)
{
	date dt={25,1,1991};
	const date cdt={20,2,99};
	
	dt.add_day(3);
	cout << dt.day() << endl;
//	cdt.add_day(2);
	cout << cdt.day() << endl;
	return 0;
}

--------------------------------------------------------------
C언어로 전환
#include <stdio.h>

struct date{
	int d,m,y;
};

void add_day(struct date* this, int n)
{
	this->d += n;
}

int day(const struct date* this)
{
	return this->d;
}

int main(void)
{
	struct date dt={25,1,1991};
	const struct date cdt={20,2,99};
	
	add_day(&dt, 3);
	printf("%d\n",day(&dt));
//	add_day(&cdt,2);
	printf("%d\n",day(&cdt));
	return 0;
}


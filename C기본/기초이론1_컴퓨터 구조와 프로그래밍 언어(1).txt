< 01 기초이론1 - 컴퓨터 구조와 프로그래밍 언어 >	(1)

[정보의 표현과 전달]
 아날로그 방식 : 전달하고자 하는 수치 값을 매체의 크기로 전달하는 방식	-> noise로 인해서 데이터가 손상될 가능성이 있음
 디지털 방식 : 전달하고자 하는 수치 값을 이진수로 변환하여 비트 단위로 정보를 전달하는 방식 -> noise가 발생해도 데이터 손실 가능성이 적음

 	디지털 vs 아날로그
 속도	느리다	빠르다
 정확도	높다	낮다

 컴퓨터의 경우에는 속도도 빨라야하지만 정확도가 제일 중요하므로 디지털 방식을 채택함

[컴퓨터 구조]
 구조 : 구성 요소를 나열하고 그 유기적인 *관계를 표현한 것 (구조 = 요소 + 관계)
 요소의 나열할 때 주의할 점 : Cover & Disjoint 
 
 컴퓨터 프로그램 : 명령의 목록(Instruction Sequence) <-- 명령은 0과 1로 표현	: 명령 표현 규칙(ISA)
 	      data 가 포함되기도 함
 컴퓨터 구조 : 컴퓨터의 구성요소와 그 유기적인 관계(관계 및 통신 규약)의 표현	// 광의적 의미
	    ISA : 기계어 명령 체계 					// 협의적 의미 (구성요소들 간의 관계가 구조의 핵심)
	구성요소를 크게 두가지로 나누면 HW & SW
	SW : 컴퓨터 프로그램
	<- 컴퓨터 프로그램 : 명령의 목록
	<- 명령 : ISA의 명령표현규칙을 따르는 0과 1로 표현됨
	이 ISA를 HW도 따름.

	==> SW개발하는 입장에서는 ISA라고 주장.
	   +) 또 다른 협의적 해석들 (HW 입장)
		Micro-architecture : CPU의 구성요소들과 그것들의 결합에 대한 상세한 시스템 명세	
		System Design : CPU와 나머지 하드웨어 구성요소들과의 연결에 대한 설계

 ENIAC : 최초의 컴퓨터. 각 요소들이 전선(명령의 표현)으로 복잡하게 연결 되어 있음. 프로그램 외장 방식(Wired Program)
	--> 프로그램 == Hardware(전선)
 
 폰 노이만 컴퓨터 구조 : 메인메모리 추가 --> 프로그램 내장 방식의 컴퓨터(Stored Program)
	--> 효율적인 프로그래밍으로 인해 프로그램 개발 비용과 시간이 절약됨.
 EDVAC : 폰 노이만 컴퓨터 구조를 최초로 반영한 컴퓨터. --> Software의 개념이 등장
 
 메인메모리(Main Memory)
   값(데이터) + 주소 --> 주소에 값을 저장
   주소	--> 해당 주소의 데이터를 읽음

 컴퓨터는 디지털 기기 --> 컴퓨터 프로그램은 0과 1로 표현된 기계어 프로그램
 기계어 프로그램 : 컴퓨터가 이해하고 수행할 수 있는 유일한 프로그램
 	프로세스 : 메인 메모리에서 실행 중인 기계어 프로그램 --> MM에 있어야 실행중이라고 함
	실행파일 : 하드디스크에 저장되어 실행되고 있지 않는 기계어 프로그램

[프로그래밍 언어]
 Machine Language(기계어) : 0과 1로만 구성됨. 컴퓨터는 이해하기 쉽지만 사람이 이해하기 힘듦.
 Assembly Language(어셈블리어) : 기계어 명령어를 1대1 대응. 기계어보다는 사람이 판독하기에 더 쉬움. (컴퓨터는 이해하지 못함)
 High-Level Language(고급언어) : 사람이 이해하기에는 가장 쉬움. (컴퓨터는 이해하지 못함)

		기계어		어셈블리어		고급어
 언어표현방식	0과 1로 표현	간단한 단어로 표현	수식 및 간단한 단어로 표현
 HW의 이해여부	가능		불가능		불가능
 사람의 이해 용이성 	어려움		약간 쉬움		쉬움
 이종 ISA 호환여부	호환 불가		호환 불가		호환 가능
 번역기		필요없음		어셈블러		컴파일러
 번역기 제작	필요 없음		쉬움		어려움

 C 언어
  - 1970년대 Dennis Ritchie, Ken Thomson이 개발한 고급어
  - OS 개발 및 시스템 프로그래밍용 언어
  - 포인터 등의 개념을 지원하여 저급 언어에 가까운 정교한 프로그래밍이 가능하므로 중급언어로 분류되기도 함
  - *구조적 프로그램(객체지향 개념없음)
  - *이식성(어셈블리나 기계어에 비해), 효율성(속도 향상), 간결성(표현)
  - *메모리 관리가 중요(포인터)

 대규모 소프트웨어를 관리하기에는 구조적 프로그램인 C언어가 부적합 --> 객체지향 등장
  
 C++
  - Bjarne Stroustrup이 개발
  - C언어 포함하되 객체지향 개념 추가(포인터 개념 포함)
 
 Java
  - C언어를 기반으로 한 객체지향 언어이지만 포인터 개념은 배제
  - 웹 응용프로그램 개발 유리





















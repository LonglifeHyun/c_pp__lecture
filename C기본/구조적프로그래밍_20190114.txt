구조적프로그래밍 강의_2019.01.14

구조적 프로그래밍 4편 

[인덴트]
K & R Style : C언어 창시자가 만든 스타일. 가장 오래되었고, 널리 알려져 있음. --> 기준으로 둘 것.

[유사 패턴의 반복문 전환]
반복문 작성 방법
	유사패턴 -> 동일패턴 -> 반복문(while) -> 반복문(for)
	기초적이지만 고난도 문제를 해결할 때 쓰이는 아주 원론적인 것임. 잘 알아둘 것.

동일패턴 --> 반복문 할 때 주의해야 할 것: begin_value, end_value, stop_value

< for문 분석 테이블 >
iteration variable == i	: for문 반복에 지대한 영향을 주는 변수

p17
i	i<4	s=s+i
==============================
1	true	1=0+1
2	true	3=1+2
3	true	6=3+3
4	false	no execution
------------------------------
반복범위 : 1 3 1
반복횟수 : 3
반복후값 : 4
	
--> 디버깅하기에 좋음. for문에서 막혔을 때 해결법으로 이용할 것.

# 반복문 안에서 수행되는 문장(여기서는 s=s+i)은 내가 계산하는 것이 아님. 컴퓨터가 계산하는 것임.
-----------------------------------------------------------------------------------------------------
< for문의 활용 형태 3가지 >
1) 반복 횟수의 활용_a^b를 계산하여 출력

#include <stdio.h>

int main(void)
{
	int a, b;
	int i, m=1;
	
	scanf("%d%d", &a, &b);
	
	for(i=0;i<b;++i)
		m*=a;
		
	printf("%d\n",m);
	return 0;
}

--------------------------------------------
2) 반복 범위의 활용_n!을 계산하여 출력
#include <stdio.h>

int main(void)
{
	int n;
	int i, m=1;
	
	scanf("%d", &n);
	
	for(i=n;i>0;--i)
		m*=i;
		
	printf("%d\n",m);
	return 0;
}
---------------------------------------------
3) 반복 후 값 활용_a와 b의 최소공배수를 계산하여 출력
#include <stdio.h>

int main(void)
{
	int a,b;
	int i, m=1;
	
	scanf("%d%d", &a, &b);
	
	for(i=1; !(i%a==0 && i%b==0);++i)
		;
		
	printf("%d\n",i);
	return 0;
}
--------------------------------------------------------
[수열의 조작]
배열의 길이 vs 수열의 길이

< 반드시 이해하고 외워야 할 수열 조작 코드 >
1) 수열_append
수열의 길이의 의미 : (1)새 원소를 저장할 위치 (2)이미 저장된 기존의 원소 개수

#include <stdio.h>

int main(void)
{
	double a[100] = {1.1, 2.2, 3.3};
	int len = 3, i;
	double new_value = 4.4;
	
	a[len++] = new_value;
	
	for(i=0;i<len;++i)
		printf("%g ", a[i]);
	printf("\n");
	return 0;
}

2) 수열_remove
배열의 메모리를 부분적으로 없애는 것은 불가능. 없는 걸로 무시하면 됨. 길이를 하나 줄임.
#include <stdio.h>

int main(void)
{
	double a[100] = {1.1, 2.2, 3.3};
	int len = 3, i;
	
	--len;
	
	for(i=0;i<len;++i)
		printf("%g ", a[i]);
	printf("\n");
	return 0;
}

3) 수열_romove the n'th : Tail-replacement
지우고 싶은 인덱스에 맨 마지막 인덱스의 데이터를 넣고 길이 하나 줄임.
수열(데이터)의 순서가 중요하지 않을 때 사용하기에 적절한 방법. 
#include <stdio.h>

int main(void)
{
	double a[100] = {1.1, 2.2, 3.3, 4.4, 5.5};
	int len = 5;
	int i, n;
	
	scanf("%d", &n);

	a[n] = a[--len];
	
	for(i=0;i<len;++i)
		printf("%g ", a[i]);
	printf("\n");
	return 0;
}

4) 수열_romove the n'th : Step-forward
삭제할 위치 뒤의 모든 원소들을 한 칸 앞으로 이동시킨후, 길이 1감소.
수열의 순서가 중요할 때 사용하기에 적절한 방법.

(self-append)
#include <stdio.h>

int main(void)
{
	double a[100] = {1.1, 2.2, 3.3, 4.4, 5.5};
	int len = 5;
	int i, n;
	
	scanf("%d", &n);

	for(i=n+1;i<len;++i)
		a[n++] = a[i];			// self-append
	len = n;				// n : 배열의 길이
	
	for(i=0;i<len;++i)
		printf("%g ", a[i]);
	printf("\n");
	return 0;
}
--------------------------------------------------------------
배열 a, b는 다른 메모리를 사용
#include <stdio.h>

int main(void)
{
	double a[100] = {1.1, 2.2, 3.3, 4.4, 5.5};
	int len = 5;
	
	double b[100] = {1.1, 2.2, 0.0, 0.0, 0.0};
	int i, n;
	
	scanf("%d", &n);

	for(i=n+1;i<len;++i)			// 주의) destination이 아닌 source의 index.
		b[n++] = a[i];			// source에서 삭제할 요소 뒤의 모든 요소를 destination 에 넣으라는 의미.
	len = n;
	
	for(i=0;i<len;++i)
		printf("%g ", b[i]);
	printf("\n");
	return 0;
}


< 함수의 활용 >
1) 입력받은 정수의 합 구하기
#include <stdio.h>

int sum(int a, int b, int c)
{
	return a+b+c;
}

int main(void)
{
	int a, b, c;
	
	scanf("%d%d%d", &a, &b, &c);
	printf("%d\n", sum(a,b,c));
	return 0;
}

2) 2차 방정식의 근 판별하기
#include <stdio.h>

double disc(double a, double b, double c)
{
	return b*b - 4*a*c;
}

int main(void)
{
	double a, b, c, d;
	
	scanf("%lf%lf%lf", &a, &b, &c);
	d = disc(a,b,c);
	
	if( d > 0.0 )
		printf("two real roots.\n");
	if( d == 0.0 )
		printf("one real root.\n");
	if( d < 0.0 )
		printf("imaginary roots.\n");
	return 0;
}

< 진리값 반환 함수 >
함수이름이 is_???이면 진리값을 반환하는 함수임. (프로그래머들에겐 전통적인 것.)

p37의 코드는 좀 바보같은 코드임. --> 오른쪽처럼 ㄱㄱ

p38 ~ P41
오른쪽 코드 뭐하는건가 싶지만 일단 code simplification을 위해서는 알아야함.

========================================================================================

구조적프로그래밍 5편(5주차)

[조건문에서 공통 처리문]

[조건식의 변형]
1) '!= 0'는 생략 가능. 있으나 없으나 같은 결과를 만듦.
	ex) 'cnd != 0'   ==    'cnd'

2) '조건==0'은 '!조건'으로 바꿀 수 있다. 둘은 같은 것임.
	ex) 'cnd == 0'   ==    '!cnd'

< 주의해야 할 점 >
if( 진리값 )

정/실 + 정/실 == 정/실		// 산술연산자
정/실 < 정/실 == 진리값		// 관계연산자
진리값  && 진리값 == 진리값	// 논리연산자

진리값 + 진리값 == 정수 	// 원래는 있을 수 없는 일인데, 컴퓨터가 진리값을 정수로밖에 표현하지 못해서 왜곡된 결과.
정수 && 정수 == 진리값		// 위와 마찬가지.

--> if( a%2 !=0 )	// 바람직.
 == if( a%2 )		// tricky --> 오타구(덕후)적 표현.  if( 정수 )는 원래 말도 안됨.

(1) while( i^10 ){		// ^ : bitwise 연산자 --> 10과 ^(exclusive or)연산을 한 결과가 0이되면 탈출. 
	...
}

(2) while( i!=10 ){
	...
}

--> (1) 은 오타구적 코딩. 한때는 속도가 빠르기 때문에 이렇게 사용되던 시절도 있긴했지만, 지금은 완전 찌질이적 표현.
그 옛날 시절엔 하드웨어의 성능이 한참 떨어졌기에 오타구적 표현을 하나라도 더 아는 것이 좋았음.
오타구적 표현은 사용하지 말도록 하자. 찌질해진다.
대신에 누가 이렇게 코딩해놓으면 딱보고 간파해낼줄은 알아야함.

증감 연산자의 사용에 있어서,
C언어에서는 전치와 후치의 속도차가 거의 없지만
C++에서는 전치가 후치보다 훨씬 빠름. 
전치를 사용하는 것을 추천.


p26
# 큰 짐승을 다루는 방법 : 약점을 찔러라!
소를 내보내기 위한 방법 : 고삐를 잡고 나감.

--> 복잡한 문제가 있으면 약점을 찾아라.

반복문에서는 n(고삐)만 조정하면 됨.


























